import { BulkAction, BulkActionPayload, BulkActionProps } from '../entities/bulk-action';
import { PlainClientAPI } from '../plain/common-types';
export declare class BulkActionProcessingError extends Error {
    bulkAction?: BulkAction | BulkActionProps;
    constructor(message: string, bulkAction?: BulkAction | BulkActionProps);
}
export declare class BulkActionFailedError extends BulkActionProcessingError {
}
export declare type BulkActionProcessingOptions = {
    /** The amount of times to retry.
     * @default 30
     * */
    retryCount?: number;
    /** The interval between retries, in milliseconds (ms).
     * @default 2000 (2s)
     * */
    retryIntervalMs?: number;
    /**
     * Initial delay in milliseconds when performing the first check.
     * This is used to prevent short running bulkActions of waiting too long for a result.
     * @default 1000 (1s)
     * */
    initialDelayMs?: number;
    /**
     * Throws an error if the BulkAction does not complete with a successful (succeeded) status.
     * @default true
     */
    throwOnFailedExecution?: boolean;
};
/**
 * @private
 * @description Waits for a BulkAction to be completed and to be in one of the final states (failed or succeeded)
 * @param {Function} fn - GET function that will be called every interval to fetch a bulkAction status
 * @throws {BulkActionFailedError} throws an error if `throwOnFailedExecution = true` with the bulkAction that failed.
 * @throws {BulkActionProcessingError} throws an error with a bulkAction when processing takes too long.
 */
export declare function pollBulkActionStatus(getBulkActionFunction: () => Promise<BulkActionProps | BulkAction>, options?: BulkActionProcessingOptions): Promise<BulkActionProps>;
declare type PlainOptions = {
    /** Used by the PlainClient to perform a poll for the BulkAction status */
    plainClient: PlainClientAPI;
    spaceId: string;
    environmentId: string;
    bulkActionId: string;
};
/** Waits for a BulkAction status to be either succeeded or failed.
 * Used by the Plain client */
export declare function waitForBulkActionProcessing<T extends BulkActionPayload = any>({ plainClient, spaceId, environmentId, bulkActionId }: PlainOptions, options?: BulkActionProcessingOptions): Promise<BulkActionProps<T>>;
export {};
