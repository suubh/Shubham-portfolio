function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import copy from 'fast-copy';
import { freezeSys, toPlainObject } from 'contentful-sdk-core';
import enhanceWithMethods from '../enhance-with-methods';
import { wrapCollection } from '../common-utils';
import { wrapSnapshot, wrapSnapshotCollection } from './snapshot';
import * as checks from '../plain/checks';

function createEntryApi(makeRequest) {
  var getParams = function getParams(self) {
    var entry = self.toPlainObject();
    return {
      params: {
        spaceId: entry.sys.space.sys.id,
        environmentId: entry.sys.environment.sys.id,
        entryId: entry.sys.id
      },
      raw: entry
    };
  };

  return {
    update: function update() {
      var _getParams = getParams(this),
          raw = _getParams.raw,
          params = _getParams.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'update',
        params: params,
        payload: raw
      }).then(function (data) {
        return wrapEntry(makeRequest, data);
      });
    },
    patch: function patch(ops) {
      var _getParams2 = getParams(this),
          raw = _getParams2.raw,
          params = _getParams2.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'patch',
        params: _objectSpread(_objectSpread({}, params), {}, {
          version: raw.sys.version
        }),
        payload: ops
      }).then(function (data) {
        return wrapEntry(makeRequest, data);
      });
    },
    "delete": function del() {
      var _getParams3 = getParams(this),
          params = _getParams3.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'delete',
        params: params
      });
    },
    publish: function publish() {
      var _getParams4 = getParams(this),
          raw = _getParams4.raw,
          params = _getParams4.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'publish',
        params: params,
        payload: raw
      }).then(function (data) {
        return wrapEntry(makeRequest, data);
      });
    },
    unpublish: function unpublish() {
      var _getParams5 = getParams(this),
          params = _getParams5.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'unpublish',
        params: params
      }).then(function (data) {
        return wrapEntry(makeRequest, data);
      });
    },
    archive: function archive() {
      var _getParams6 = getParams(this),
          params = _getParams6.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'archive',
        params: params
      }).then(function (data) {
        return wrapEntry(makeRequest, data);
      });
    },
    unarchive: function unarchive() {
      var _getParams7 = getParams(this),
          params = _getParams7.params;

      return makeRequest({
        entityType: 'Entry',
        action: 'unarchive',
        params: params
      }).then(function (data) {
        return wrapEntry(makeRequest, data);
      });
    },
    getSnapshots: function getSnapshots() {
      var query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var _getParams8 = getParams(this),
          params = _getParams8.params;

      return makeRequest({
        entityType: 'Snapshot',
        action: 'getManyForEntry',
        params: _objectSpread(_objectSpread({}, params), {}, {
          query: query
        })
      }).then(function (data) {
        return wrapSnapshotCollection(makeRequest, data);
      });
    },
    getSnapshot: function getSnapshot(snapshotId) {
      var _getParams9 = getParams(this),
          params = _getParams9.params;

      return makeRequest({
        entityType: 'Snapshot',
        action: 'getForEntry',
        params: _objectSpread(_objectSpread({}, params), {}, {
          snapshotId: snapshotId
        })
      }).then(function (data) {
        return wrapSnapshot(makeRequest, data);
      });
    },
    isPublished: function isPublished() {
      var raw = this.toPlainObject();
      return checks.isPublished(raw);
    },
    isUpdated: function isUpdated() {
      var raw = this.toPlainObject();
      return checks.isUpdated(raw);
    },
    isDraft: function isDraft() {
      var raw = this.toPlainObject();
      return checks.isDraft(raw);
    },
    isArchived: function isArchived() {
      var raw = this.toPlainObject();
      return checks.isArchived(raw);
    }
  };
}
/**
 * @private
 * @param makeRequest - function to make requests via an adapter
 * @param data - Raw entry data
 * @return Wrapped entry data
 */


export function wrapEntry(makeRequest, data) {
  var entry = toPlainObject(copy(data));
  var entryWithMethods = enhanceWithMethods(entry, createEntryApi(makeRequest));
  return freezeSys(entryWithMethods);
}
/**
 * Data is also mixed in with link getters if links exist and includes were requested
 * @private
 */

export var wrapEntryCollection = wrapCollection(wrapEntry);