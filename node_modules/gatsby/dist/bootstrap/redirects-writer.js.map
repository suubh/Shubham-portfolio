{"version":3,"sources":["../../src/bootstrap/redirects-writer.ts"],"names":["lastHash","bootstrapFinished","writeRedirects","program","redirects","store","getState","browserRedirects","filter","r","redirectInBrowser","map","isPermanent","ignoreCase","fromPath","rest","toLowerCase","newHash","crypto","createHash","update","JSON","stringify","digest","fs","writeFile","directory","debouncedWriteRedirects","_","debounce","startRedirectListener","emitter","on"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAIA,QAAuB,GAAG,IAA9B;AACA,IAAIC,iBAAiB,GAAG,KAAxB;;AAEO,MAAMC,cAAc,GAAG,YAA2B;AACvDD,EAAAA,iBAAiB,GAAG,IAApB;;AAEA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAyBC,aAAMC,QAAN,EAA/B,CAHuD,CAKvD;;;AACA,QAAMC,gBAAgB,GAAGH,SAAS,CAC/BI,MADsB,CACfC,CAAC,IAAIA,CAAC,CAACC,iBADQ,EAEvB;AAFuB,GAGtBC,GAHsB,CAIrB,CAAC;AAAED,IAAAA,iBAAF;AAAqBE,IAAAA,WAArB;AAAkCC,IAAAA,UAAlC;AAA8CC,IAAAA,QAA9C;AAAwD,OAAGC;AAA3D,GAAD,KAAuE;AACrE,WAAO;AACLD,MAAAA,QAAQ,EAAED,UAAU,GAAGC,QAAQ,CAACE,WAAT,EAAH,GAA4BF,QAD3C;AAELD,MAAAA,UAFK;AAGL,SAAGE;AAHE,KAAP;AAKD,GAVoB,CAAzB;;AAaA,QAAME,OAAO,GAAGC,gBACbC,UADa,CACD,KADC,EAEbC,MAFa,CAENC,IAAI,CAACC,SAAL,CAAef,gBAAf,CAFM,EAGbgB,MAHa,CAGL,KAHK,CAAhB;;AAKA,MAAIN,OAAO,KAAKjB,QAAhB,EAA0B;AACxB;AACD;;AAEDA,EAAAA,QAAQ,GAAGiB,OAAX;AAEA,QAAMO,iBAAGC,SAAH,CACJ,+BAAStB,OAAO,CAACuB,SAAjB,EAA6B,uBAA7B,CADI,EAEJL,IAAI,CAACC,SAAL,CAAef,gBAAf,EAAiC,IAAjC,EAAuC,CAAvC,CAFI,CAAN;AAID,CAlCM;;;;AAoCP,MAAMoB,uBAAuB,GAAGC,gBAAEC,QAAF,CAAW,MAAM;AAC/C;AACA,MAAI5B,iBAAJ,EAAuB;AACrBC,IAAAA,cAAc;AACf;AACF,CAL+B,EAK7B,GAL6B,CAAhC;;AAOO,MAAM4B,qBAAqB,GAAG,MAAY;AAC/CC,iBAAQC,EAAR,CAAY,iBAAZ,EAA8B,MAAM;AAClCL,IAAAA,uBAAuB;AACxB,GAFD;AAGD,CAJM","sourcesContent":["import _ from \"lodash\"\nimport crypto from \"crypto\"\nimport fs from \"fs-extra\"\nimport { store, emitter } from \"../redux\"\nimport { joinPath } from \"gatsby-core-utils\"\n\nlet lastHash: string | null = null\nlet bootstrapFinished = false\n\nexport const writeRedirects = async (): Promise<void> => {\n  bootstrapFinished = true\n\n  const { program, redirects } = store.getState()\n\n  // Filter for redirects that are meant for the browser.\n  const browserRedirects = redirects\n    .filter(r => r.redirectInBrowser)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    .map(\n      ({ redirectInBrowser, isPermanent, ignoreCase, fromPath, ...rest }) => {\n        return {\n          fromPath: ignoreCase ? fromPath.toLowerCase() : fromPath,\n          ignoreCase,\n          ...rest,\n        }\n      }\n    )\n\n  const newHash = crypto\n    .createHash(`md5`)\n    .update(JSON.stringify(browserRedirects))\n    .digest(`hex`)\n\n  if (newHash === lastHash) {\n    return\n  }\n\n  lastHash = newHash\n\n  await fs.writeFile(\n    joinPath(program.directory, `.cache/redirects.json`),\n    JSON.stringify(browserRedirects, null, 2)\n  )\n}\n\nconst debouncedWriteRedirects = _.debounce(() => {\n  // Don't write redirects again until bootstrap has finished.\n  if (bootstrapFinished) {\n    writeRedirects()\n  }\n}, 250)\n\nexport const startRedirectListener = (): void => {\n  emitter.on(`CREATE_REDIRECT`, () => {\n    debouncedWriteRedirects()\n  })\n}\n"],"file":"redirects-writer.js"}