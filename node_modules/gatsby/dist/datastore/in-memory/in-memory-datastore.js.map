{"version":3,"sources":["../../../src/datastore/in-memory/in-memory-datastore.ts"],"names":["getNodes","nodes","store","getState","Array","from","values","getNodesByType","type","nodesByType","get","getNode","id","getTypes","keys","sort","countNodes","typeName","size","readyPromise","Promise","resolve","undefined","ready","setupInMemoryStore"],"mappings":";;;;;AACA;;AAGA;AACA;AACA;AACA,SAASA,QAAT,GAAwC;AACtC,QAAMC,KAAK,GAAGC,aAAMC,QAAN,GAAiBF,KAA/B;;AACA,MAAIA,KAAJ,EAAW;AACT,WAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF;AAED;AACA;AACA;;;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA0D;AACxD,QAAMP,KAAK,GAAGC,aAAMC,QAAN,GAAiBM,WAAjB,CAA6BC,GAA7B,CAAiCF,IAAjC,CAAd;;AACA,MAAIP,KAAJ,EAAW;AACT,WAAOG,KAAK,CAACC,IAAN,CAAWJ,KAAK,CAACK,MAAN,EAAX,CAAP;AACD,GAFD,MAEO;AACL,WAAO,EAAP;AACD;AACF;;AAED,SAASK,OAAT,CAAiBC,EAAjB,EAAsD;AACpD,SAAOV,aAAMC,QAAN,GAAiBF,KAAjB,CAAuBS,GAAvB,CAA2BE,EAA3B,CAAP;AACD;;AAED,SAASC,QAAT,GAAmC;AACjC;AACA,SAAOT,KAAK,CAACC,IAAN,CAAWH,aAAMC,QAAN,GAAiBM,WAAjB,CAA6BK,IAA7B,EAAX,EAAgDC,IAAhD,EAAP;AACD;;AAED,SAASC,UAAT,CAAoBC,QAApB,EAA+C;AAC7C,MAAI,CAACA,QAAL,EAAe;AACb,WAAOf,aAAMC,QAAN,GAAiBF,KAAjB,CAAuBiB,IAA9B;AACD;;AACD,QAAMjB,KAAK,GAAGC,aAAMC,QAAN,GAAiBM,WAAjB,CAA6BC,GAA7B,CAAiCO,QAAjC,CAAd;;AACA,SAAOhB,KAAK,GAAGA,KAAK,CAACiB,IAAT,GAAgB,CAA5B;AACD;;AAED,MAAMC,YAAY,GAAGC,OAAO,CAACC,OAAR,CAAgBC,SAAhB,CAArB;AAEA;AACA;AACA;AACA;;AACA,SAASC,KAAT,GAAgC;AAC9B,SAAOJ,YAAP;AACD;;AAEM,SAASK,kBAAT,GAA0C;AAC/C,SAAO;AACLb,IAAAA,OADK;AAELE,IAAAA,QAFK;AAGLG,IAAAA,UAHK;AAILO,IAAAA,KAJK;AAML;AACAvB,IAAAA,QAPK;AAQLO,IAAAA;AARK,GAAP;AAUD","sourcesContent":["import { IDataStore } from \"../types\"\nimport { store } from \"../../redux\"\nimport { IGatsbyNode } from \"../../redux/types\"\n\n/**\n * @deprecated\n */\nfunction getNodes(): Array<IGatsbyNode> {\n  const nodes = store.getState().nodes\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\n/**\n * @deprecated\n */\nfunction getNodesByType(type: string): Array<IGatsbyNode> {\n  const nodes = store.getState().nodesByType.get(type)\n  if (nodes) {\n    return Array.from(nodes.values())\n  } else {\n    return []\n  }\n}\n\nfunction getNode(id: string): IGatsbyNode | undefined {\n  return store.getState().nodes.get(id)\n}\n\nfunction getTypes(): Array<string> {\n  // Note: sorting to match the output of the LMDB version (where keys are sorted by default)\n  return Array.from(store.getState().nodesByType.keys()).sort()\n}\n\nfunction countNodes(typeName?: string): number {\n  if (!typeName) {\n    return store.getState().nodes.size\n  }\n  const nodes = store.getState().nodesByType.get(typeName)\n  return nodes ? nodes.size : 0\n}\n\nconst readyPromise = Promise.resolve(undefined)\n\n/**\n * Returns promise that resolves when the store is ready for reads\n * (the in-memory store is always ready)\n */\nfunction ready(): Promise<void> {\n  return readyPromise\n}\n\nexport function setupInMemoryStore(): IDataStore {\n  return {\n    getNode,\n    getTypes,\n    countNodes,\n    ready,\n\n    // deprecated:\n    getNodes,\n    getNodesByType,\n  }\n}\n"],"file":"in-memory-datastore.js"}