{"version":3,"sources":["../../../src/datastore/lmdb/lmdb-datastore.ts"],"names":["rootDbFile","process","env","NODE_ENV","JEST_WORKER_ID","rootDb","databases","getRootDb","name","path","cwd","sharedStructuresKey","Symbol","for","compression","getDatabases","nodes","openDB","cache","nodesByType","dupSort","getNodes","result","Array","from","iterateNodes","getNodesByType","type","iterateNodesByType","nodesDb","getKeys","snapshot","map","nodeId","getNode","filter","Boolean","getValues","id","undefined","get","getTypes","asArray","countNodes","typeName","stats","getStats","Number","entryCount","count","forEach","lastOperationPromise","Promise","resolve","updateDataStore","action","dbs","transactionSync","clear","all","ready","setupLmdbStore","lmdbDatastore","state","Map","emitter","on"],"mappings":";;;;;AAAA;;AAGA;;AACA;;AAEA;;AAEA,MAAMA,UAAU,GACdC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAA0B,MAA1B,GACK,kBAAiBF,OAAO,CAACC,GAAR,CAAYE,cAAe,EADjD,GAEK,WAHP;AAKA,IAAIC,MAAJ;AACA,IAAIC,SAAJ;;AAEA,SAASC,SAAT,GAAmC;AACjC,MAAI,CAACF,MAAL,EAAa;AACXA,IAAAA,MAAM,GAAG,qBAAK;AACZG,MAAAA,IAAI,EAAG,MADK;AAEZC,MAAAA,IAAI,EAAER,OAAO,CAACS,GAAR,KAAiB,eAAjB,GAAkCV,UAF5B;AAGZW,MAAAA,mBAAmB,EAAEC,MAAM,CAACC,GAAP,CAAY,YAAZ,CAHT;AAIZC,MAAAA,WAAW,EAAE;AAJD,KAAL,CAAT;AAMD;;AACD,SAAOT,MAAP;AACD;;AAED,SAASU,YAAT,GAAwC;AACtC,MAAI,CAACT,SAAL,EAAgB;AACd,UAAMD,MAAM,GAAGE,SAAS,EAAxB;AACAD,IAAAA,SAAS,GAAG;AACVU,MAAAA,KAAK,EAAEX,MAAM,CAACY,MAAP,CAAc;AACnBT,QAAAA,IAAI,EAAG,OADY;AAEnBU,QAAAA,KAAK,EAAE;AAFY,OAAd,CADG;AAKVC,MAAAA,WAAW,EAAEd,MAAM,CAACY,MAAP,CAAc;AACzBT,QAAAA,IAAI,EAAG,aADkB;AAEzBY,QAAAA,OAAO,EAAE;AAFgB,OAAd;AALH,KAAZ;AAUD;;AACD,SAAOd,SAAP;AACD;AAED;AACA;AACA;;;AACA,SAASe,QAAT,GAAwC;AACtC;AACA,QAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAwBC,YAAY,EAApC,CAAf,CAFsC,CAGtC;AACA;AACA;AACA;AACA;;AACA,SAAOH,MAAP,aAAOA,MAAP,cAAOA,MAAP,GAAiB,EAAjB;AACD;AAED;AACA;AACA;;;AACA,SAASI,cAAT,CAAwBC,IAAxB,EAA0D;AACxD;AACA,QAAML,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAwBI,kBAAkB,CAACD,IAAD,CAA1C,CAAf,CAFwD,CAGxD;AACA;AACA;AACA;AACA;;AACA,SAAOL,MAAP,aAAOA,MAAP,cAAOA,MAAP,GAAiB,EAAjB;AACD;;AAED,SAASG,YAAT,GAAwD;AACtD;AACA,QAAMI,OAAO,GAAGd,YAAY,GAAGC,KAA/B;AACA,SAAOa,OAAO,CACXC,OADI,CACI;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GADJ,EAEJC,GAFI,CAEAC,MAAM,IAAIC,OAAO,CAACD,MAAD,CAFjB,EAGJE,MAHI,CAGGC,OAHH,CAAP;AAID;;AAED,SAASR,kBAAT,CAA4BD,IAA5B,EAA0E;AACxE,QAAMR,WAAW,GAAGJ,YAAY,GAAGI,WAAnC;AACA,SAAOA,WAAW,CACfkB,SADI,CACMV,IADN,EAEJK,GAFI,CAEAC,MAAM,IAAIC,OAAO,CAACD,MAAD,CAFjB,EAGJE,MAHI,CAGGC,OAHH,CAAP;AAID;;AAED,SAASF,OAAT,CAAiBI,EAAjB,EAAsD;AACpD,MAAI,CAACA,EAAL,EAAS,OAAOC,SAAP;AACT,QAAM;AAAEvB,IAAAA;AAAF,MAAYD,YAAY,EAA9B;AACA,SAAOC,KAAK,CAACwB,GAAN,CAAUF,EAAV,CAAP;AACD;;AAED,SAASG,QAAT,GAAmC;AACjC,SAAO1B,YAAY,GAAGI,WAAf,CAA2BW,OAA3B,CAAmC,EAAnC,EAAuCY,OAA9C;AACD;;AAED,SAASC,UAAT,CAAoBC,QAApB,EAA+C;AAC7C,MAAI,CAACA,QAAL,EAAe;AACb,UAAMC,KAAK,GAAG9B,YAAY,GAAGC,KAAf,CAAqB8B,QAArB,EAAd,CADa,CAEb;;AACA,WAAOC,MAAM,CAACF,KAAK,CAACG,UAAN,IAAoB,CAArB,CAAb;AACD;;AAED,QAAM;AAAE7B,IAAAA;AAAF,MAAkBJ,YAAY,EAApC;AACA,MAAIkC,KAAK,GAAG,CAAZ;AACA9B,EAAAA,WAAW,CAACkB,SAAZ,CAAsBO,QAAtB,EAAgCM,OAAhC,CAAwC,MAAM;AAC5CD,IAAAA,KAAK;AACN,GAFD;AAGA,SAAOA,KAAP;AACD;;AAED,IAAIE,oBAAkC,GAAGC,OAAO,CAACC,OAAR,EAAzC;;AAEA,SAASC,eAAT,CAAyBC,MAAzB,EAAqD;AACnD,UAAQA,MAAM,CAAC5B,IAAf;AACE,SAAM,cAAN;AAAqB;AACnB,cAAM6B,GAAG,GAAGzC,YAAY,EAAxB,CADmB,CAEnB;;AACAyC,QAAAA,GAAG,CAACxC,KAAJ,CAAUyC,eAAV,CAA0B,MAAM;AAC9BD,UAAAA,GAAG,CAACxC,KAAJ,CAAU0C,KAAV;AACAF,UAAAA,GAAG,CAACrC,WAAJ,CAAgBuC,KAAhB;AACD,SAHD;AAIA;AACD;;AACD,SAAM,aAAN;AACA,SAAM,mBAAN;AACA,SAAM,+BAAN;AACA,SAAM,aAAN;AAAoB;AAClB,cAAMF,GAAG,GAAGzC,YAAY,EAAxB;AACAoC,QAAAA,oBAAoB,GAAGC,OAAO,CAACO,GAAR,CAAY,CACjC,wBAAYH,GAAG,CAACxC,KAAhB,EAAuBuC,MAAvB,CADiC,EAEjC,oCAAkBC,GAAG,CAACrC,WAAtB,EAAmCoC,MAAnC,CAFiC,CAAZ,CAAvB;AAID;AAnBH;AAqBD;AAED;AACA;AACA;;;AACA,eAAeK,KAAf,GAAsC;AACpC,QAAMT,oBAAN;AACD;;AAEM,SAASU,cAAT,GAAsC;AAC3C,QAAMC,aAAa,GAAG;AACpB5B,IAAAA,OADoB;AAEpBO,IAAAA,QAFoB;AAGpBE,IAAAA,UAHoB;AAIpBlB,IAAAA,YAJoB;AAKpBG,IAAAA,kBALoB;AAMpB0B,IAAAA,eANoB;AAOpBM,IAAAA,KAPoB;AASpB;AACAvC,IAAAA,QAVoB;AAWpBK,IAAAA;AAXoB,GAAtB;AAaA,6BAAe;AACbV,IAAAA,KAAK,EAAE,CAAC+C,KAAK,GAAG,IAAIC,GAAJ,EAAT,EAAoBT,MAApB,KACLA,MAAM,CAAC5B,IAAP,KAAiB,cAAjB,GAAiC,IAAIqC,GAAJ,EAAjC,GAA6CD,KAFlC;AAGb5C,IAAAA,WAAW,EAAE,CAAC4C,KAAK,GAAG,IAAIC,GAAJ,EAAT,EAAoBT,MAApB,KACXA,MAAM,CAAC5B,IAAP,KAAiB,cAAjB,GAAiC,IAAIqC,GAAJ,EAAjC,GAA6CD;AAJlC,GAAf;;AAMAE,iBAAQC,EAAR,CAAY,GAAZ,EAAgBX,MAAM,IAAI;AACxB,QAAIA,MAAJ,EAAY;AACVD,MAAAA,eAAe,CAACC,MAAD,CAAf;AACD;AACF,GAJD;;AAKA,SAAOO,aAAP;AACD","sourcesContent":["import { ArrayLikeIterable, RootDatabase, open } from \"lmdb-store\"\n// import { performance } from \"perf_hooks\"\nimport { ActionsUnion, IGatsbyNode } from \"../../redux/types\"\nimport { updateNodes } from \"./updates/nodes\"\nimport { updateNodesByType } from \"./updates/nodes-by-type\"\nimport { IDataStore, ILmdbDatabases } from \"../types\"\nimport { emitter, replaceReducer } from \"../../redux\"\n\nconst rootDbFile =\n  process.env.NODE_ENV === `test`\n    ? `test-datastore-${process.env.JEST_WORKER_ID}`\n    : `datastore`\n\nlet rootDb\nlet databases\n\nfunction getRootDb(): RootDatabase {\n  if (!rootDb) {\n    rootDb = open({\n      name: `root`,\n      path: process.cwd() + `/.cache/data/` + rootDbFile,\n      sharedStructuresKey: Symbol.for(`structures`),\n      compression: true,\n    })\n  }\n  return rootDb\n}\n\nfunction getDatabases(): ILmdbDatabases {\n  if (!databases) {\n    const rootDb = getRootDb()\n    databases = {\n      nodes: rootDb.openDB({\n        name: `nodes`,\n        cache: true,\n      }),\n      nodesByType: rootDb.openDB({\n        name: `nodesByType`,\n        dupSort: true,\n      }),\n    }\n  }\n  return databases\n}\n\n/**\n * @deprecated\n */\nfunction getNodes(): Array<IGatsbyNode> {\n  // const start = performance.now()\n  const result = Array.from<IGatsbyNode>(iterateNodes())\n  // const timeTotal = performance.now() - start\n  // console.warn(\n  //   `getNodes() is deprecated, use iterateNodes() instead; ` +\n  //     `array length: ${result.length}; time(ms): ${timeTotal}`\n  // )\n  return result ?? []\n}\n\n/**\n * @deprecated\n */\nfunction getNodesByType(type: string): Array<IGatsbyNode> {\n  // const start = performance.now()\n  const result = Array.from<IGatsbyNode>(iterateNodesByType(type))\n  // const timeTotal = performance.now() - start\n  // console.warn(\n  //   `getNodesByType() is deprecated, use iterateNodesByType() instead; ` +\n  //     `array length: ${result.length}; time(ms): ${timeTotal}`\n  // )\n  return result ?? []\n}\n\nfunction iterateNodes(): ArrayLikeIterable<IGatsbyNode> {\n  // Additionally fetching items by id to leverage lmdb-store cache\n  const nodesDb = getDatabases().nodes\n  return nodesDb\n    .getKeys({ snapshot: false })\n    .map(nodeId => getNode(nodeId)!)\n    .filter(Boolean)\n}\n\nfunction iterateNodesByType(type: string): ArrayLikeIterable<IGatsbyNode> {\n  const nodesByType = getDatabases().nodesByType\n  return nodesByType\n    .getValues(type)\n    .map(nodeId => getNode(nodeId)!)\n    .filter(Boolean)\n}\n\nfunction getNode(id: string): IGatsbyNode | undefined {\n  if (!id) return undefined\n  const { nodes } = getDatabases()\n  return nodes.get(id)\n}\n\nfunction getTypes(): Array<string> {\n  return getDatabases().nodesByType.getKeys({}).asArray\n}\n\nfunction countNodes(typeName?: string): number {\n  if (!typeName) {\n    const stats = getDatabases().nodes.getStats()\n    // @ts-ignore\n    return Number(stats.entryCount || 0)\n  }\n\n  const { nodesByType } = getDatabases()\n  let count = 0\n  nodesByType.getValues(typeName).forEach(() => {\n    count++\n  })\n  return count\n}\n\nlet lastOperationPromise: Promise<any> = Promise.resolve()\n\nfunction updateDataStore(action: ActionsUnion): void {\n  switch (action.type) {\n    case `DELETE_CACHE`: {\n      const dbs = getDatabases()\n      // Force sync commit\n      dbs.nodes.transactionSync(() => {\n        dbs.nodes.clear()\n        dbs.nodesByType.clear()\n      })\n      break\n    }\n    case `CREATE_NODE`:\n    case `ADD_FIELD_TO_NODE`:\n    case `ADD_CHILD_NODE_TO_PARENT_NODE`:\n    case `DELETE_NODE`: {\n      const dbs = getDatabases()\n      lastOperationPromise = Promise.all([\n        updateNodes(dbs.nodes, action),\n        updateNodesByType(dbs.nodesByType, action),\n      ])\n    }\n  }\n}\n\n/**\n * Resolves when all the data is synced\n */\nasync function ready(): Promise<void> {\n  await lastOperationPromise\n}\n\nexport function setupLmdbStore(): IDataStore {\n  const lmdbDatastore = {\n    getNode,\n    getTypes,\n    countNodes,\n    iterateNodes,\n    iterateNodesByType,\n    updateDataStore,\n    ready,\n\n    // deprecated:\n    getNodes,\n    getNodesByType,\n  }\n  replaceReducer({\n    nodes: (state = new Map(), action) =>\n      action.type === `DELETE_CACHE` ? new Map() : state,\n    nodesByType: (state = new Map(), action) =>\n      action.type === `DELETE_CACHE` ? new Map() : state,\n  })\n  emitter.on(`*`, action => {\n    if (action) {\n      updateDataStore(action)\n    }\n  })\n  return lmdbDatastore\n}\n"],"file":"lmdb-datastore.js"}